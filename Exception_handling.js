// throw can output string, number, bool and object(general)

throw "Execption"
throw 42
throw true
throw {toString: function() { return "I'm an object!"; } };

// Create an object type UserException

function UserException(message) {
  this.message = message;
  this.name = 'UserException';
}

// Make the exception convert to a pretty string when used as a string 
// (e.g., by the error console)
UserException.prototype.toString = function() {
  return `${this.name}: "${this.message}"`;
}

// Create an instance of the object type and throw it
throw new UserException('Value too high');

// When logging errors to the console inside a catch block, using console.error()
// rather than console.log() is advised for debugging. It formats the message as 
// an error, and adds it to the list of error messages generated by the page. 

try {
  doSomethingErrorProne();
} catch (e) {               // NOW, we actually use `console.error()`
  console.error(e.name);    // logs 'Error'
  console.error(e.message); // logs 'The message', or a JavaScript error message
}
